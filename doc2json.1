.\"    Automatically generated by mango(1)
.TH "doc2json" 1 "2014-02-09" "version 2014-02-09" "User Commands"
.SH "NAME"
doc2json \- Command doc2json(1) reads godoc(1) formatted text from stdin
and writes json to stdout.
.SH "SYNOPSIS"
.B doc2json
.B 
.SH "DESCRIPTION"
Stdin is UTF\-8 encoded plain text. 
The format of the text is exactly that as used in Go source documentation. 
However, the input is not expected to contain comment characters, see example. 
.PP
Stdout is minified JSON, in the format described below. 
.SH "JSON FORMAT"
The json is a list of objects. 
Each object has two fields: Kind and Lines. 
.PP
Kind is a string with the following possible values: 
.PP
.RS
p   \- paragraphs
.sp 0
h   \- header
.sp 0
pre \- preformatted text (likely code)
.sp 0
.sp
.RE
.PP
Lines is a list of strings. 
.SH "EXAMPLE"
Note that doc2json does not pretty print its output, but it is done so here so as to make it easier to read. 
.PP
.RS
$ cat <<EOF | doc2json
.sp 0
This is a paragraph.
.sp 0
.sp
This is a header
.sp 0
.sp
This is another paragraph.
.sp 0
With multiple lines.
.sp 0
.RS
This is preformatted
.sp 0
text
.sp 0
.RE
EOF
.sp 0
[
.sp 0
.RS
{
.sp 0
.RS
"Kind": "p",
.sp 0
"Lines": ["This is a paragraph.\en"]
.sp 0
.RE
},
.sp 0
{
.sp 0
.RS
"Kind": "h",
.sp 0
"Lines": ["This is a header"]
.sp 0
.RE
},
.sp 0
{
.sp 0
.RS
"Kind": "p",
.sp 0
"Lines": [
.sp 0
.RS
"This is another paragraph\en",
.sp 0
"With multiple lines.\en"
.sp 0
.RE
]
.sp 0
.RE
},
.sp 0
{
.sp 0
.RS
"Kind": "pre",
.sp 0
"Lines": [
.sp 0
.RS
"This is preformatted\en",
.sp 0
"text\en"
.sp 0
.RE
]
.sp 0
.RE
}
.sp 0
.RE
]
.RE
.SH "SEE ALSO"
.BR godoc (1)
